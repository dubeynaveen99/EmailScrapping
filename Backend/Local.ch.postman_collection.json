{
	"info": {
		"_postman_id": "5e42bc20-9189-4374-94d1-ea9ef3ed5330",
		"name": "UpdatedScrapping",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38235581"
	},
	"item": [
		{
			"name": "https://www.local.ch/_next/data/{{id}}/en/s/{{searchQuery}}.json?rid={{rid}}&page={{page}}&search=s&searchQuery={{searchQuery}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the initial page and initialize the results array in the environment\r",
							"if (!pm.environment.get(\"currentPage\")) {\r",
							"    pm.environment.set(\"currentPage\", 1);\r",
							"    pm.environment.set(\"results\", \"[]\");  // Initialize an empty array for results\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Initialize the environment variables if not set\r",
							"if (!pm.environment.get(\"currentPage\")) {\r",
							"    pm.environment.set(\"currentPage\", 1);\r",
							"    pm.environment.set(\"allEntries\", \"[]\");  // Initialize an empty array for all entries\r",
							"    pm.environment.set(\"duplicateEntries\", \"[]\");  // Initialize an empty array for duplicate entries\r",
							"}\r",
							"\r",
							"// Extract the response body as JSON (ensure it's valid)\r",
							"let jsonData;\r",
							"try {\r",
							"    jsonData = pm.response.json();\r",
							"} catch (e) {\r",
							"    console.error(\"Response is not valid JSON:\", e);\r",
							"    return;  // Exit if the response is not valid JSON\r",
							"}\r",
							"\r",
							"// Extract results from the response\r",
							"let totalResults = jsonData.pageProps?.searchMeta?.totalResults || 0;\r",
							"let results = jsonData.pageProps?.data?.search?.entries || [];\r",
							"\r",
							"let allEntries = JSON.parse(pm.environment.get(\"allEntries\") || \"[]\");\r",
							"let duplicateEntries = JSON.parse(pm.environment.get(\"duplicateEntries\") || \"[]\");\r",
							"\r",
							"// Helper function to check if an entry exists in an array based on title\r",
							"const isEntryPresent = (newEntry, existingEntries) => {\r",
							"    return existingEntries.some(entry => entry.title === newEntry.title);\r",
							"};\r",
							"\r",
							"// Process each result and handle duplicates\r",
							"results.forEach(result => {\r",
							"    let title = result?.entry?.title || 'No title';\r",
							"    let emailContact = result?.entry?.contacts?.find(contact => contact.__typename === 'EmailContact');\r",
							"    let email = emailContact ? emailContact.value : 'Not available';\r",
							"    let phoneContact = result?.entry?.contacts?.find(contact => contact.__typename === 'PhoneContact');\r",
							"    let phone = phoneContact ? phoneContact.value : 'Not available';\r",
							"    let urlContact = result?.entry?.contacts?.find(contact => contact.__typename === 'URLContact');\r",
							"    let url = urlContact ? urlContact.value : 'Not available';\r",
							"\r",
							"    let entry = { title, email, phone, url };\r",
							"\r",
							"    // Check if entry already exists in allEntries\r",
							"    if (isEntryPresent(entry, allEntries)) {\r",
							"        // Check if the duplicate entry is already recorded\r",
							"        if (!isEntryPresent(entry, duplicateEntries)) {\r",
							"            // Add to duplicateEntries if it's not already present\r",
							"            duplicateEntries.push(entry);\r",
							"        }\r",
							"    } else {\r",
							"        // Add the entry to allEntries if it's not already present\r",
							"        allEntries.push(entry);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Save updated results and duplicates back to the environment\r",
							"pm.environment.set(\"allEntries\", JSON.stringify(allEntries));\r",
							"pm.environment.set(\"duplicateEntries\", JSON.stringify(duplicateEntries));\r",
							"\r",
							"// Extract total results from pageProps.searchMeta.totalResults\r",
							"let totalPages = Math.ceil(totalResults / 20); // Assuming 20 results per page\r",
							"\r",
							"// Recursive function to trigger the next page request\r",
							"const fetchNextPage = (currentPage) => {\r",
							"    let rid = pm.environment.get(\"rid\");\r",
							"    let id = pm.environment.get(\"id\");\r",
							"    let searchQuery = pm.environment.get(\"searchQuery\");\r",
							"\r",
							"    // Construct the URL for the next page\r",
							"    let newUrl = `https://www.local.ch/_next/data/${id}/en/s//${searchQuery}.json?rid=${rid}&page=${currentPage}&search=s&searchQuery=${searchQuery}`;\r",
							"\r",
							"    pm.sendRequest(newUrl, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error('Error fetching page:', currentPage, err);\r",
							"        } else {\r",
							"            let newJsonData;\r",
							"            try {\r",
							"                newJsonData = res.json();\r",
							"            } catch (e) {\r",
							"                console.error(\"Response for page \" + currentPage + \" is not valid JSON:\", e);\r",
							"                return;  // Exit if the response is not valid JSON\r",
							"            }\r",
							"\r",
							"            let newResults = newJsonData.pageProps?.data?.search?.entries || [];\r",
							"\r",
							"            // Process the new entries and check for duplicates\r",
							"            newResults.forEach(result => {\r",
							"                let title = result?.entry?.title || 'No title';\r",
							"                let emailContact = result?.entry?.contacts?.find(contact => contact.__typename === 'EmailContact');\r",
							"                let email = emailContact ? emailContact.value : 'Not available';\r",
							"                let phoneContact = result?.entry?.contacts?.find(contact => contact.__typename === 'PhoneContact');\r",
							"                let phone = phoneContact ? phoneContact.value : 'Not available';\r",
							"                let urlContact = result?.entry?.contacts?.find(contact => contact.__typename === 'URLContact');\r",
							"                let url = urlContact ? urlContact.value : 'Not available';\r",
							"\r",
							"                let entry = { title, email, phone, url };\r",
							"\r",
							"                if (isEntryPresent(entry, allEntries)) {\r",
							"                    if (!isEntryPresent(entry, duplicateEntries)) {\r",
							"                        duplicateEntries.push(entry);\r",
							"                    }\r",
							"                } else {\r",
							"                    allEntries.push(entry);\r",
							"                }\r",
							"            });\r",
							"\r",
							"            // Update environment variables with the new entries\r",
							"            pm.environment.set(\"allEntries\", JSON.stringify(allEntries));\r",
							"            pm.environment.set(\"duplicateEntries\", JSON.stringify(duplicateEntries));\r",
							"\r",
							"            // Continue to the next page if there are more pages\r",
							"            if (currentPage < totalPages) {\r",
							"                currentPage++;\r",
							"                pm.environment.set(\"currentPage\", currentPage);\r",
							"                fetchNextPage(currentPage);  // Recursively fetch the next page\r",
							"            } else {\r",
							"                // Final log of results when all pages are processed\r",
							"                console.log(`Final Results Processed: ${allEntries.length} entries.`);\r",
							"                console.log(`Duplicate Entries Processed: ${duplicateEntries.length} entries.`);\r",
							"            }\r",
							"        }\r",
							"    });\r",
							"};\r",
							"\r",
							"// Trigger the next page request if more pages are available\r",
							"let currentPage = parseInt(pm.environment.get(\"currentPage\"), 10);\r",
							"if (currentPage < totalPages) {\r",
							"    currentPage++;\r",
							"    pm.environment.set(\"currentPage\", currentPage);\r",
							"    fetchNextPage(currentPage);  // Start fetching from the next page\r",
							"} else {\r",
							"    // Log final results if already on the last page\r",
							"    console.log(`Final Results Processed: ${allEntries.length} entries.`);\r",
							"    console.log(`Duplicate Entries Processed: ${duplicateEntries.length} entries.`);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.local.ch/_next/data/{{id}}/en/s/{{searchQuery}}.json?rid={{rid}}&page={{currentPage}}&search=s&searchQuery={{searchQuery}}",
					"protocol": "https",
					"host": [
						"www",
						"local",
						"ch"
					],
					"path": [
						"_next",
						"data",
						"{{id}}",
						"en",
						"s",
						"{{searchQuery}}.json"
					],
					"query": [
						{
							"key": "rid",
							"value": "{{rid}}"
						},
						{
							"key": "page",
							"value": "{{currentPage}}"
						},
						{
							"key": "search",
							"value": "s"
						},
						{
							"key": "searchQuery",
							"value": "{{searchQuery}}"
						}
					]
				}
			},
			"response": []
		}
	]
}